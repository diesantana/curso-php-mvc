<?php

namespace bng\Controllers;

use bng\Controllers\BaseController;
use bng\Models\Agents;

class Main extends BaseController
{
    /**
     * Ponto de entrada do main controller.
     * Verifica se existe um usu√°rio logado, se sim, carrega a view.
     * Se n√£o existir usu√°rio logado, redireciona para o formul√°rio de login (M√©todo login_frm())
     */
    public function index()
    {
        // Verifica se existe um usu√°rio logado. 
        if (!checkSession()) {
            // Se n√£o existir um usu√°rio logado eu chamo a fun√ß√£o login_frm()
            // login_frm √© respons√°vel por exibir o formul√°rio de login
            $this->login_frm();
            return;
        }

        // Se existir usu√°rio logado
        $this->view('layouts/html_header'); // Estrutura inicial do HTML
        echo '<h3 class="text-white text-center">Ol√° mundo</h3>'; // Exibe um 'Hello world' (c√≥digo tempor√°rio)
        $this->view('layouts/html_footer'); // Estrutura inicial do HTML
    }

    /**
     * L√≥gica para apresentar o formul√°rio de login.
     * M√©todo respons√°vel por apresentar o formul√°rio de login com as poss√≠veis mensagens de erro.
     */
    public function login_frm()
    {
        // Verificando se existe um usu√°rio logado
        if (checkSession()) {
            // Se existir usu√°rio logado, chama o m√©todo index. 
            // O index, vai conter a l√≥gica para apresentar a view de acordo com o perfil do user.
            $this->index();
            return;
        }

        // Se n√£o existir usu√°rio logado, verifica se existem erros.
        $data = []; // Armazena poss√≠veis mensagens erro

        // Se existir erros, armazena em $data[] e apaga os erros da sess√£o
        // Os erros ser√£o exclu√≠dos da sess√£o pois eles j√° est√£o sendo tratados.
        if (!empty($_SESSION['validation_errors'])) {
            $data['validation_errors'] = $_SESSION['validation_errors']; // Atribui os erros ao array $data
            unset($_SESSION['validation_errors']); // Remove a vari√°vel da sess√£o
        }

        // Exibe o formul√°rio com os p√≥ss√≠veis erros
        $this->view('layouts/html_header'); // Estrutura inicial do HTML
        $this->view('login_frm', $data); // View respons√°vel pelo formul√°rio de login
        $this->view('layouts/html_footer'); // Estrutura inicial do HTML

    }

    /**
     * M√©todo respons√°vel por tratar a submiss√£o do foruml√°rio de login
     */
    public function login_submit()
    {

        // Verifica se existe um usu√°rio logado
        if (checkSession()) {
            // Se existir um usu√°rio logado, chama o m√©todo index
            // O m√©todo index() vai exibir a view de acordo com o perfil deste usu√°rio logado.
            $this->index();
            return;
        }

        // Aqui nenhum usu√°rio est√° logado! 
        // Verifica se o formul√°rio foi submetido corretamente.
        if ($_SERVER['REQUEST_METHOD'] != 'POST') {
            // Se o formul√°rio n√£o foi submetido corretamnte, chama o m√©todo index()
            $this->index();
            return;
        }

        // Valida√ß√£o do formul√°rio
        $validation_errors = []; // Array que vai armazenar os poss√≠veis erros

        if (empty($_POST['text_username']) || empty($_POST['text_password'])) {
            $validation_errors[] = 'Username e password s√£o obrigat√≥rios!';
        }

        // Aqui, j√° sabemos que os valores (username e password) n√£o est√£o vazios, vamos tratar eles.
        // Captura os valores enviados pelo usu√°rio
        $username = $_POST['text_username'];
        $password = $_POST['text_password'];

        // verifica se text_username √© um email v√°lido
        if (!filter_var($username, FILTER_VALIDATE_EMAIL)) {
            // se filter_var retornar false, logo o email n√£o √© v√°lido, temos um erro!
            // Este erro deve ser adicionado ao array de erros ($validation_errors)
            $validation_errors[] = 'O username deve ser um email v√°lido.';
        }

        // Verifica se text_username est√° entre 5 e 50 caracteres
        if (strlen($username) < 5 || strlen($username) > 50) {
            $validation_errors[] = 'O username deve ter entre 5 e 50 caracteres.';
        }

        // Verifica se a senha est√° entre 6 e 12 caracteres
        if (strlen($password) < 6 || strlen($password) > 12) {
            $validation_errors[] = 'A password deve ter entre 6 e 12 caracteres.';
        }

        // Se existir erros, vamos salvar na session
        if (!empty($validation_errors)) {
            $_SESSION['validation_errors'] = $validation_errors; // Salva os erros na session
            $this->login_frm(); // Chama o m√©todo respons√°vel por exibir o formul√°rio de login
            return;
            // Quando o login_frm() verificar que n√£o tem nenhum usu√°rio logado, o formul√°rio 
            // vai ser exibido novamente, com os erros. 
        }

        // Valida as credencias de login
        $modelAgents = new Agents();
        $validatesLogin = $modelAgents->check_login($username, $password);

        if($validatesLogin['status']) {
            echo "Tudo OK! üü© Login realizado com sucesso";
        }else {
            echo "Nada feito! ‚ùå As credencias n√£o s√£o v√°lidas";
        }
    }
}
